{"ast":null,"code":"// src/store/cartReducer.js\nimport { ADD_TO_CART, REMOVE_FROM_CART, UPDATE_QUANTITY, CLEAR_CART } from './Actions';\nconst initialState = JSON.parse(localStorage.getItem('cart')) || [];\nconst cartReducer = (state = initialState, action) => {\n  let updatedCart;\n  switch (action.type) {\n    case ADD_TO_CART:\n      // Check if product with same ID, size, and color already exists\n      const existingItemIndex = state.findIndex(item => item.id === action.payload.id && item.size === action.payload.size && item.color === action.payload.color);\n      if (existingItemIndex !== -1) {\n        // Update existing item quantity\n        updatedCart = state.map((item, index) => index === existingItemIndex ? {\n          ...item,\n          quantity: item.quantity + action.payload.quantity\n        } : item);\n      } else {\n        // Add new item\n        updatedCart = [...state, {\n          id: action.payload.id,\n          quantity: action.payload.quantity,\n          size: action.payload.size,\n          color: action.payload.color\n        }];\n      }\n      break;\n    case REMOVE_FROM_CART:\n      updatedCart = state.filter(item => item.id !== action.payload);\n      break;\n    case UPDATE_QUANTITY:\n      const {\n        productId,\n        quantity\n      } = action.payload;\n      updatedCart = state.map(item => item.id === productId ? {\n        ...item,\n        quantity\n      } : item);\n      break;\n    case CLEAR_CART:\n      updatedCart = []; // Xóa tất cả sản phẩm trong giỏ hàng\n      break;\n    default:\n      updatedCart = state;\n  }\n\n  // Lưu giỏ hàng vào Local Storage\n  localStorage.setItem('cart', JSON.stringify(updatedCart));\n  return updatedCart;\n};\nexport default cartReducer;","map":{"version":3,"names":["ADD_TO_CART","REMOVE_FROM_CART","UPDATE_QUANTITY","CLEAR_CART","initialState","JSON","parse","localStorage","getItem","cartReducer","state","action","updatedCart","type","existingItemIndex","findIndex","item","id","payload","size","color","map","index","quantity","filter","productId","setItem","stringify"],"sources":["E:/GitHub/CDWeb/FrontEnd/src/store/CartReducer.js"],"sourcesContent":["// src/store/cartReducer.js\r\nimport { ADD_TO_CART, REMOVE_FROM_CART, UPDATE_QUANTITY,CLEAR_CART } from './Actions';\r\n\r\nconst initialState = JSON.parse(localStorage.getItem('cart')) || [];\r\nconst cartReducer = (state = initialState, action) => {\r\n    let updatedCart;\r\n    switch (action.type) {\r\n        case ADD_TO_CART:\r\n            // Check if product with same ID, size, and color already exists\r\n            const existingItemIndex = state.findIndex(item => \r\n                item.id === action.payload.id && \r\n                item.size === action.payload.size && \r\n                item.color === action.payload.color\r\n            );\r\n            \r\n            if (existingItemIndex !== -1) {\r\n                // Update existing item quantity\r\n                updatedCart = state.map((item, index) => \r\n                    index === existingItemIndex\r\n                        ? { ...item, quantity: item.quantity + action.payload.quantity }\r\n                        : item\r\n                );\r\n            } else {\r\n                // Add new item\r\n                updatedCart = [...state, { \r\n                    id: action.payload.id, \r\n                    quantity: action.payload.quantity,\r\n                    size: action.payload.size,\r\n                    color: action.payload.color\r\n                }];\r\n            }\r\n            break;\r\n        case REMOVE_FROM_CART:\r\n            updatedCart = state.filter(item => item.id !== action.payload);\r\n            break;\r\n        case UPDATE_QUANTITY:\r\n            const { productId, quantity } = action.payload;\r\n            updatedCart = state.map(item =>\r\n                item.id === productId\r\n                    ? { ...item, quantity }\r\n                    : item\r\n            );\r\n\r\n            break;\r\n        case CLEAR_CART:\r\n            updatedCart = []; // Xóa tất cả sản phẩm trong giỏ hàng\r\n            break;\r\n        default:\r\n            updatedCart = state;\r\n    }\r\n\r\n    // Lưu giỏ hàng vào Local Storage\r\n    localStorage.setItem('cart', JSON.stringify(updatedCart));\r\n\r\n    return updatedCart;\r\n};\r\n\r\nexport default cartReducer;\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,gBAAgB,EAAEC,eAAe,EAACC,UAAU,QAAQ,WAAW;AAErF,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE;AACnE,MAAMC,WAAW,GAAGA,CAACC,KAAK,GAAGN,YAAY,EAAEO,MAAM,KAAK;EAClD,IAAIC,WAAW;EACf,QAAQD,MAAM,CAACE,IAAI;IACf,KAAKb,WAAW;MACZ;MACA,MAAMc,iBAAiB,GAAGJ,KAAK,CAACK,SAAS,CAACC,IAAI,IAC1CA,IAAI,CAACC,EAAE,KAAKN,MAAM,CAACO,OAAO,CAACD,EAAE,IAC7BD,IAAI,CAACG,IAAI,KAAKR,MAAM,CAACO,OAAO,CAACC,IAAI,IACjCH,IAAI,CAACI,KAAK,KAAKT,MAAM,CAACO,OAAO,CAACE,KAClC,CAAC;MAED,IAAIN,iBAAiB,KAAK,CAAC,CAAC,EAAE;QAC1B;QACAF,WAAW,GAAGF,KAAK,CAACW,GAAG,CAAC,CAACL,IAAI,EAAEM,KAAK,KAChCA,KAAK,KAAKR,iBAAiB,GACrB;UAAE,GAAGE,IAAI;UAAEO,QAAQ,EAAEP,IAAI,CAACO,QAAQ,GAAGZ,MAAM,CAACO,OAAO,CAACK;QAAS,CAAC,GAC9DP,IACV,CAAC;MACL,CAAC,MAAM;QACH;QACAJ,WAAW,GAAG,CAAC,GAAGF,KAAK,EAAE;UACrBO,EAAE,EAAEN,MAAM,CAACO,OAAO,CAACD,EAAE;UACrBM,QAAQ,EAAEZ,MAAM,CAACO,OAAO,CAACK,QAAQ;UACjCJ,IAAI,EAAER,MAAM,CAACO,OAAO,CAACC,IAAI;UACzBC,KAAK,EAAET,MAAM,CAACO,OAAO,CAACE;QAC1B,CAAC,CAAC;MACN;MACA;IACJ,KAAKnB,gBAAgB;MACjBW,WAAW,GAAGF,KAAK,CAACc,MAAM,CAACR,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKN,MAAM,CAACO,OAAO,CAAC;MAC9D;IACJ,KAAKhB,eAAe;MAChB,MAAM;QAAEuB,SAAS;QAAEF;MAAS,CAAC,GAAGZ,MAAM,CAACO,OAAO;MAC9CN,WAAW,GAAGF,KAAK,CAACW,GAAG,CAACL,IAAI,IACxBA,IAAI,CAACC,EAAE,KAAKQ,SAAS,GACf;QAAE,GAAGT,IAAI;QAAEO;MAAS,CAAC,GACrBP,IACV,CAAC;MAED;IACJ,KAAKb,UAAU;MACXS,WAAW,GAAG,EAAE,CAAC,CAAC;MAClB;IACJ;MACIA,WAAW,GAAGF,KAAK;EAC3B;;EAEA;EACAH,YAAY,CAACmB,OAAO,CAAC,MAAM,EAAErB,IAAI,CAACsB,SAAS,CAACf,WAAW,CAAC,CAAC;EAEzD,OAAOA,WAAW;AACtB,CAAC;AAED,eAAeH,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}