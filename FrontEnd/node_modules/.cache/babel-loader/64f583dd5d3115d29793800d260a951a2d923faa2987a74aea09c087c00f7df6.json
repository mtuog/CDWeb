{"ast":null,"code":"export default class Webcam {\n  constructor(webcamElement, facingMode = 'user', canvasElement = null, snapSoundElement = null) {\n    this._webcamElement = webcamElement;\n    this._webcamElement.width = this._webcamElement.width || 640;\n    this._webcamElement.height = this._webcamElement.height || 360;\n    this._facingMode = facingMode;\n    this._webcamList = [];\n    this._streamList = [];\n    this._selectedDeviceId = '';\n    this._canvasElement = canvasElement;\n    this._snapSoundElement = snapSoundElement;\n  }\n  get facingMode() {\n    return this._facingMode;\n  }\n  set facingMode(value) {\n    this._facingMode = value;\n  }\n  get webcamList() {\n    return this._webcamList;\n  }\n  get webcamCount() {\n    return this._webcamList.length;\n  }\n  get selectedDeviceId() {\n    return this._selectedDeviceId;\n  }\n\n  /* Get all video input devices info */\n  getVideoInputs(mediaDevices) {\n    this._webcamList = [];\n    mediaDevices.forEach(mediaDevice => {\n      if (mediaDevice.kind === 'videoinput') {\n        this._webcamList.push(mediaDevice);\n      }\n    });\n    if (this._webcamList.length == 1) {\n      this._facingMode = 'user';\n    }\n    return this._webcamList;\n  }\n\n  /* Get media constraints */\n  getMediaConstraints() {\n    var videoConstraints = {};\n    if (this._selectedDeviceId == '') {\n      videoConstraints.facingMode = this._facingMode;\n    } else {\n      videoConstraints.deviceId = {\n        exact: this._selectedDeviceId\n      };\n    }\n    videoConstraints.width = {\n      exact: this._webcamElement.width\n    };\n    videoConstraints.height = {\n      exact: this._webcamElement.height\n    };\n    var constraints = {\n      video: videoConstraints,\n      audio: false\n    };\n    return constraints;\n  }\n\n  /* Select camera based on facingMode */\n  selectCamera() {\n    for (let webcam of this._webcamList) {\n      if (this._facingMode == 'user' && webcam.label.toLowerCase().includes('front') || this._facingMode == 'enviroment' && webcam.label.toLowerCase().includes('back')) {\n        this._selectedDeviceId = webcam.deviceId;\n        break;\n      }\n    }\n  }\n\n  /* Change Facing mode and selected camera */\n  flip() {\n    this._facingMode = this._facingMode == 'user' ? 'enviroment' : 'user';\n    this._webcamElement.style.transform = \"\";\n    this.selectCamera();\n  }\n\n  /*\r\n    1. Get permission from user\r\n    2. Get all video input devices info\r\n    3. Select camera based on facingMode \r\n    4. Start stream\r\n  */\n  async start(startStream = true) {\n    return new Promise((resolve, reject) => {\n      this.stop();\n      navigator.mediaDevices.getUserMedia(this.getMediaConstraints()) //get permisson from user\n      .then(stream => {\n        this._streamList.push(stream);\n        this.info() //get all video input devices info\n        .then(webcams => {\n          this.selectCamera(); //select camera based on facingMode\n          if (startStream) {\n            this.stream().then(facingMode => {\n              resolve(this._facingMode);\n            }).catch(error => {\n              reject(error);\n            });\n          } else {\n            resolve(this._selectedDeviceId);\n          }\n        }).catch(error => {\n          reject(error);\n        });\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  /* Get all video input devices info */\n  async info() {\n    return new Promise((resolve, reject) => {\n      navigator.mediaDevices.enumerateDevices().then(devices => {\n        this.getVideoInputs(devices);\n        resolve(this._webcamList);\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  /* Start streaming webcam to video element */\n  async stream() {\n    return new Promise((resolve, reject) => {\n      navigator.mediaDevices.getUserMedia(this.getMediaConstraints()).then(stream => {\n        this._streamList.push(stream);\n        this._webcamElement.srcObject = stream;\n        if (this._facingMode == 'user') {\n          this._webcamElement.style.transform = \"scale(-1,1)\";\n        }\n        this._webcamElement.play();\n        resolve(this._facingMode);\n      }).catch(error => {\n        console.log(error);\n        reject(error);\n      });\n    });\n  }\n\n  /* Stop streaming webcam */\n  stop() {\n    this._streamList.forEach(stream => {\n      stream.getTracks().forEach(track => {\n        track.stop();\n      });\n    });\n  }\n  snap() {\n    if (this._canvasElement != null) {\n      if (this._snapSoundElement != null) {\n        this._snapSoundElement.play();\n      }\n      this._canvasElement.height = this._webcamElement.scrollHeight;\n      this._canvasElement.width = this._webcamElement.scrollWidth;\n      let context = this._canvasElement.getContext('2d');\n      if (this._facingMode == 'user') {\n        context.translate(this._canvasElement.width, 0);\n        context.scale(-1, 1);\n      }\n      context.clearRect(0, 0, this._canvasElement.width, this._canvasElement.height);\n      context.drawImage(this._webcamElement, 0, 0, this._canvasElement.width, this._canvasElement.height);\n      let data = this._canvasElement.toDataURL('image/png');\n      return data;\n    } else {\n      throw \"canvas element is missing\";\n    }\n  }\n}","map":{"version":3,"names":["Webcam","constructor","webcamElement","facingMode","canvasElement","snapSoundElement","_webcamElement","width","height","_facingMode","_webcamList","_streamList","_selectedDeviceId","_canvasElement","_snapSoundElement","value","webcamList","webcamCount","length","selectedDeviceId","getVideoInputs","mediaDevices","forEach","mediaDevice","kind","push","getMediaConstraints","videoConstraints","deviceId","exact","constraints","video","audio","selectCamera","webcam","label","toLowerCase","includes","flip","style","transform","start","startStream","Promise","resolve","reject","stop","navigator","getUserMedia","then","stream","info","webcams","catch","error","enumerateDevices","devices","srcObject","play","console","log","getTracks","track","snap","scrollHeight","scrollWidth","context","getContext","translate","scale","clearRect","drawImage","data","toDataURL"],"sources":["E:/GitHub/CDWeb/FrontEnd/node_modules/webcam-easy/src/webcam-easy.js"],"sourcesContent":["export default class Webcam {\r\n    constructor(webcamElement, facingMode = 'user', canvasElement = null, snapSoundElement = null) {\r\n      this._webcamElement = webcamElement;\r\n      this._webcamElement.width = this._webcamElement.width || 640;\r\n      this._webcamElement.height = this._webcamElement.height || 360;\r\n      this._facingMode = facingMode;\r\n      this._webcamList = [];\r\n      this._streamList = [];\r\n      this._selectedDeviceId = '';\r\n      this._canvasElement = canvasElement;\r\n      this._snapSoundElement = snapSoundElement;\r\n    }\r\n\r\n    get facingMode(){\r\n      return this._facingMode;\r\n    }\r\n\r\n    set facingMode(value){\r\n      this._facingMode = value;\r\n    }\r\n\r\n    get webcamList(){\r\n      return this._webcamList;\r\n    }\r\n\r\n    get webcamCount(){\r\n      return this._webcamList.length;\r\n    }\r\n\r\n    get selectedDeviceId(){\r\n      return this._selectedDeviceId;\r\n    }\r\n\r\n    /* Get all video input devices info */\r\n    getVideoInputs(mediaDevices){\r\n      this._webcamList = [];\r\n      mediaDevices.forEach(mediaDevice => {\r\n        if (mediaDevice.kind === 'videoinput') {\r\n          this._webcamList.push(mediaDevice);\r\n        }\r\n      });\r\n      if(this._webcamList.length == 1){\r\n        this._facingMode = 'user';\r\n      }    \r\n      return this._webcamList;\r\n    }\r\n\r\n    /* Get media constraints */\r\n    getMediaConstraints() {\r\n        var videoConstraints = {};\r\n        if (this._selectedDeviceId == '') {\r\n            videoConstraints.facingMode =  this._facingMode;\r\n        } else {\r\n            videoConstraints.deviceId = { exact: this._selectedDeviceId};\r\n        }\r\n        videoConstraints.width = {exact: this._webcamElement.width};\r\n        videoConstraints.height = {exact: this._webcamElement.height};\r\n        var constraints = {\r\n            video: videoConstraints,\r\n            audio: false\r\n        };\r\n        return constraints;\r\n    }\r\n\r\n    /* Select camera based on facingMode */ \r\n    selectCamera(){\r\n      for(let webcam of this._webcamList){\r\n        if(   (this._facingMode=='user' && webcam.label.toLowerCase().includes('front'))\r\n          ||  (this._facingMode=='enviroment' && webcam.label.toLowerCase().includes('back'))\r\n        )\r\n        {\r\n          this._selectedDeviceId = webcam.deviceId;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    /* Change Facing mode and selected camera */ \r\n    flip(){\r\n      this._facingMode = (this._facingMode == 'user')? 'enviroment': 'user';\r\n      this._webcamElement.style.transform = \"\";\r\n      this.selectCamera();  \r\n    }\r\n\r\n    /*\r\n      1. Get permission from user\r\n      2. Get all video input devices info\r\n      3. Select camera based on facingMode \r\n      4. Start stream\r\n    */\r\n    async start(startStream = true) {\r\n      return new Promise((resolve, reject) => {         \r\n        this.stop();\r\n        navigator.mediaDevices.getUserMedia(this.getMediaConstraints()) //get permisson from user\r\n          .then(stream => {\r\n            this._streamList.push(stream);\r\n            this.info() //get all video input devices info\r\n              .then(webcams =>{\r\n                this.selectCamera();   //select camera based on facingMode\r\n                if(startStream){\r\n                    this.stream()\r\n                        .then(facingMode =>{\r\n                            resolve(this._facingMode);\r\n                        })\r\n                        .catch(error => {\r\n                            reject(error);\r\n                        });\r\n                }else{\r\n                    resolve(this._selectedDeviceId);\r\n                }\r\n              }) \r\n              .catch(error => {\r\n                reject(error);\r\n              });\r\n          })\r\n          .catch(error => {\r\n              reject(error);\r\n          });\r\n      });\r\n    }\r\n\r\n    /* Get all video input devices info */ \r\n    async info(){\r\n      return new Promise((resolve, reject) => {            \r\n        navigator.mediaDevices.enumerateDevices()\r\n          .then(devices =>{\r\n            this.getVideoInputs(devices);\r\n            resolve(this._webcamList);\r\n          }) \r\n          .catch(error => {\r\n            reject(error);\r\n          });\r\n      });\r\n    }\r\n\r\n    /* Start streaming webcam to video element */ \r\n    async stream() {\r\n      return new Promise((resolve, reject) => {         \r\n        navigator.mediaDevices.getUserMedia(this.getMediaConstraints())\r\n          .then(stream => {\r\n              this._streamList.push(stream);\r\n              this._webcamElement.srcObject = stream;\r\n              if(this._facingMode == 'user'){\r\n                this._webcamElement.style.transform = \"scale(-1,1)\";\r\n              }\r\n              this._webcamElement.play();\r\n              resolve(this._facingMode);\r\n          })\r\n          .catch(error => {\r\n              console.log(error);\r\n              reject(error);\r\n          });\r\n      });\r\n    }\r\n\r\n    /* Stop streaming webcam */ \r\n    stop() {\r\n      this._streamList.forEach(stream => {\r\n        stream.getTracks().forEach(track => {\r\n          track.stop();\r\n        });\r\n      });   \r\n    }\r\n\r\n    snap() {\r\n      if(this._canvasElement!=null){\r\n        if(this._snapSoundElement!= null){\r\n          this._snapSoundElement.play();\r\n        }\r\n        this._canvasElement.height = this._webcamElement.scrollHeight;\r\n        this._canvasElement.width = this._webcamElement.scrollWidth;\r\n        let context = this._canvasElement.getContext('2d');\r\n        if(this._facingMode == 'user'){\r\n          context.translate(this._canvasElement.width, 0);\r\n          context.scale(-1, 1);\r\n        }\r\n        context.clearRect(0, 0, this._canvasElement.width, this._canvasElement.height);\r\n        context.drawImage(this._webcamElement, 0, 0, this._canvasElement.width, this._canvasElement.height);\r\n        let data = this._canvasElement.toDataURL('image/png');\r\n        return data;\r\n      }\r\n      else{\r\n        throw \"canvas element is missing\";\r\n      }\r\n    } \r\n  }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}